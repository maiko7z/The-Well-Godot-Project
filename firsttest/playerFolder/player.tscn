[gd_scene load_steps=16 format=3 uid="uid://chu4ft88k3ahk"]

[ext_resource type="AudioStream" uid="uid://6r05nimratie" path="res://audio/Flashlight.mp3" id="1_4flbx"]
[ext_resource type="AudioStream" uid="uid://bnnssgjv4sunn" path="res://audio/Footstep.ogg" id="2_onrkg"]
[ext_resource type="AudioStream" uid="uid://b1kmeklk07f1i" path="res://audio/ExhaustionBreathing.mp3" id="3_6v6k0"]
[ext_resource type="Texture2D" uid="uid://di0arg7lxvb7e" path="res://images/staminabar under.jpg" id="3_erkmy"]
[ext_resource type="Texture2D" uid="uid://yx5ataeprkb1" path="res://images/Bar exterior.png" id="4_6v6k0"]
[ext_resource type="AudioStream" uid="uid://bstck34ke1g5d" path="res://audio/Hurt.mp3" id="4_vpon2"]
[ext_resource type="AudioStream" uid="uid://ru0kuavutlcp" path="res://audio/Death.ogg" id="5_kaacd"]
[ext_resource type="Texture2D" uid="uid://cmra3ak7qgoog" path="res://images/staminabar.jpg" id="5_uwpkh"]
[ext_resource type="Texture2D" uid="uid://cnj25goxf4wpd" path="res://images/healthbar under.jpg" id="6_vpon2"]
[ext_resource type="Texture2D" uid="uid://mpu84f06fnyn" path="res://images/healthbar.jpg" id="7_kaacd"]
[ext_resource type="Theme" uid="uid://cxjwnkpltc1jx" path="res://textTheme.tres" id="9_uwpkh"]

[sub_resource type="GDScript" id="GDScript_sh265"]
resource_name = "PlayerControl"
script/source = "extends CharacterBody3D
class_name Player

var speed
const WALK_SPEED = 5.0
const SPRINT_SPEED = 8.0
const CROUCH_SPEED = 2.0
const JUMP_VELOCITY = 4.8
const SENSITIVITY = 0.004

#Stamina variables, I'm making these var instead of const because I think we can change them later with level modifiers :D
var MAX_STAMINA = 100.0
var CURRENT_STAMINA = 100.0
var CROUCH_REGEN = 0.7
var STAND_REGEN = 0.5
var CROUCH_WALK_REGEN = 0.35
var WALK_REGEN = 0.2
var SPRINT_COST = 0.5
var JUMP_COST = 20.0

#Health variables
const MAX_HEALTH = 100.0
var CURRENT_HEALTH = 100.0

#Bobbing variables
const BOB_FREQ = 2.4
const BOB_AMP = 0.08
var t_bob = 0.0

#FOV variables
const BASE_FOV = 75.0
const FOV_CHANGE = 1.5

#Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = 9.8

#Sprint / crouch checks
var isCrouching = false
var isSprinting = false
var isExhausted = false

#Onready variables
@onready var head = $Head
@onready var camera = $Head/Camera3D
@onready var light1 = $Head/SpotLight3D
@onready var light2 = $Head/SpotLight3D2
@onready var flashSound = $Head/FlashlightSound
@onready var footstepSound: AudioStreamPlayer = $Head/StepSound
@onready var hurtSound: AudioStreamPlayer = $Head/HurtSound
@onready var deathSound: AudioStreamPlayer = $Head/DeathSound
@onready var staminaBar = $CanvasLayer/StaminaBar
@onready var healthBar = $CanvasLayer/HealthBar
@onready var exhaustionTimer = $ExhaustionTimer
@onready var hurtFrame = $CanvasLayer/HurtFilter
@onready var spawnFrame = $CanvasLayer/SpawnFilter
@onready var hurtFrameTimer = $HurtFrame
@onready var exhaustionSound = $Head/ExhaustionSound

var prevStep := Vector3.ZERO

func _ready():
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	prevStep = Vector3(global_position.x, 0.0, global_position.z)
	var tween = spawnFrame.create_tween()
	tween.tween_property(spawnFrame, \"modulate:a\", 0, 1)
	tween.tween_callback(spawnFrame.queue_free)

func _take_damage(damage: int):
	CURRENT_HEALTH -= damage
	healthBar.value = CURRENT_HEALTH
	#print(\"owch! hurting!\")
	if healthBar.value <= 0:
		GlobalSounds.health_death_sound_play()
		get_tree().change_scene_to_file(\"res://screens/game_over.tscn\")
	else:
		if damage >= 5: #Specifically doing this because we may drain health and don't want to give the player a seizure
			if hurtFrame.visible == false:
				hurtFrame.visible = true
				hurtFrameTimer.start()
			hurtSound.play()
			

func _hurt_frame_end():
	hurtFrame.visible = false

func _unhandled_input(event):
	if event is InputEventMouseMotion:
		head.rotate_y(-event.relative.x * SENSITIVITY)
		camera.rotate_x(-event.relative.y * SENSITIVITY)
		camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-40), deg_to_rad(60))

func _manage_stamina(crouching: bool,sprinting: bool,moving: bool):
	if moving:
		if crouching:
			if CURRENT_STAMINA < MAX_STAMINA:
				if CURRENT_STAMINA + CROUCH_WALK_REGEN > 100.0:
					CURRENT_STAMINA = 100.0
				else:
					CURRENT_STAMINA += CROUCH_WALK_REGEN
		elif sprinting:
			if CURRENT_STAMINA > 0.0:
				if CURRENT_STAMINA - SPRINT_COST > 0.0:
					CURRENT_STAMINA -= SPRINT_COST
				else:
					_exhaust()
					CURRENT_STAMINA = 0.0
		elif not sprinting and not crouching:
			if CURRENT_STAMINA < MAX_STAMINA:
				if CURRENT_STAMINA + WALK_REGEN > 100.0:
					CURRENT_STAMINA = 100.0
				else:
					CURRENT_STAMINA += WALK_REGEN
	elif not moving:
		if crouching:
			if CURRENT_STAMINA < MAX_STAMINA:
				if CURRENT_STAMINA + CROUCH_REGEN > 100.0:
					CURRENT_STAMINA = 100.0
				else:
					CURRENT_STAMINA += CROUCH_REGEN
		elif not crouching:
			if CURRENT_STAMINA < MAX_STAMINA:
				if CURRENT_STAMINA + STAND_REGEN > 100.0:
					CURRENT_STAMINA = 100.0
				else:
					CURRENT_STAMINA += STAND_REGEN
	staminaBar.value = CURRENT_STAMINA
	#print(CURRENT_STAMINA) debug stuff

func _exhaust():
	if not isExhausted:
		isExhausted = true
		exhaustionSound.play()
		exhaustionTimer.start()

func _exhaust_end():
	exhaustionSound.stop()
	isExhausted = false
	
func _physics_process(delta):
	#Gravity handler
	if not is_on_floor():
		velocity.y -= gravity * delta

	#Jump input
	if Input.is_action_just_pressed(\"jump\") and is_on_floor() and not isExhausted:
		velocity.y = JUMP_VELOCITY
		if CURRENT_STAMINA - 20.0 < 0:
			CURRENT_STAMINA = 0.0
			staminaBar.value = CURRENT_STAMINA
			_exhaust()
		else:
			CURRENT_STAMINA -= JUMP_COST
	
	#Crouch and sprint handler
	if Input.is_action_pressed(\"crouch\") and is_on_floor():
		speed = CROUCH_SPEED
		if not isCrouching:
			var tween = create_tween()
			tween.tween_property(camera, \"v_offset\", -0.5, 0.3).set_trans(Tween.TRANS_CUBIC)
		isCrouching = true
		isSprinting = false
		
	elif Input.is_action_pressed(\"sprint\") and CURRENT_STAMINA > 0 and not isExhausted:
		if isCrouching:
			var tween = create_tween()
			tween.tween_property(camera, \"v_offset\", 0, 0.3).set_trans(Tween.TRANS_CUBIC)
		speed = SPRINT_SPEED
		isCrouching = false
		isSprinting = true
	else:
		if isCrouching:
			var tween = create_tween()
			tween.tween_property(camera, \"v_offset\", 0, 0.3).set_trans(Tween.TRANS_CUBIC)
		isCrouching = false
		isSprinting = false
		speed = WALK_SPEED
	#Light input (toggle)
	if Input.is_action_just_pressed(\"light\"):
		if light1.visible:
			light1.visible = false;
			light2.visible = false;
			flashSound.stop()
			flashSound.pitch_scale = 1.2
			flashSound.volume_db = -18.0
			flashSound.play()
		else:
			light1.visible = true;
			light2.visible = true;
			flashSound.stop()
			flashSound.pitch_scale = 1.5
			flashSound.volume_db = -10.0
			flashSound.play()

	# Footsteps
	var xz_position := Vector3(global_position.x, 0.0, global_position.z)
	if prevStep.distance_to(xz_position) > 1.5 and not isCrouching:
		prevStep = xz_position
		footstepSound.play()
		
	#Stamina system
	#Input direction / deceleration (tutorial code)
	var input_dir = Input.get_vector(\"left\", \"right\", \"up\", \"down\")
	var direction = (head.transform.basis * transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if not isExhausted:
		if direction:
			_manage_stamina(isCrouching,isSprinting,true)
		else:
			_manage_stamina(isCrouching,isSprinting,false)
	
	
	if is_on_floor():
		if direction:
			velocity.x = direction.x * speed
			velocity.z = direction.z * speed
		else:
			velocity.x = lerp(velocity.x, direction.x * speed, delta * 7.0)
			velocity.z = lerp(velocity.z, direction.z * speed, delta * 7.0)
	else:
		velocity.x = lerp(velocity.x, direction.x * speed, delta * 3.0)
		velocity.z = lerp(velocity.z, direction.z * speed, delta * 3.0)
	
	
	
	#Bobbing
	t_bob += delta * velocity.length() * float(is_on_floor())
	camera.transform.origin = _headbob(t_bob)
	
	#FOV
	var velocity_clamped = clamp(velocity.length(), 0.5, SPRINT_SPEED * 2)
	var target_fov = BASE_FOV + FOV_CHANGE * velocity_clamped
	camera.fov = lerp(camera.fov, target_fov, delta * 8.0)
	
	move_and_slide()


func _headbob(time) -> Vector3:
	var pos = Vector3.ZERO
	pos.y = sin(time * BOB_FREQ) * BOB_AMP
	pos.x = cos(time * BOB_FREQ / 2) * BOB_AMP
	return pos
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_yab5q"]

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_i3pqv"]
random_pitch = 1.2
random_volume_offset_db = 4.0
streams_count = 1
stream_0/stream = ExtResource("2_onrkg")

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_vpon2"]
random_pitch = 1.28
random_volume_offset_db = 1.5
streams_count = 1
stream_0/stream = ExtResource("4_vpon2")

[node name="Player" type="CharacterBody3D" groups=["player"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.712204, 0.29932, 5.16054)
collision_layer = 2
collision_mask = 5
script = SubResource("GDScript_sh265")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.522293, 0)
shape = SubResource("CapsuleShape3D_yab5q")

[node name="Head" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.1938, 0)

[node name="Camera3D" type="Camera3D" parent="Head"]

[node name="SpotLight3D" type="SpotLight3D" parent="Head"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.0988146, 0.400088)
light_color = Color(0.765623, 0.766371, 1, 1)
shadow_enabled = true
spot_range = 14.6545
spot_angle = 34.04

[node name="SpotLight3D2" type="SpotLight3D" parent="Head"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.0988146, 0.396744)
light_color = Color(0.765623, 0.766371, 1, 1)
light_energy = 0.5
shadow_enabled = true
spot_range = 6.244
spot_angle = 70.77

[node name="OmniLight3D" type="OmniLight3D" parent="Head"]
light_color = Color(0.764706, 0.764706, 1, 1)
light_energy = 0.25
omni_range = 2.446

[node name="FlashlightSound" type="AudioStreamPlayer" parent="Head"]
stream = ExtResource("1_4flbx")
volume_db = -12.418
bus = &"ReverbAmbience"

[node name="StepSound" type="AudioStreamPlayer" parent="Head"]
stream = SubResource("AudioStreamRandomizer_i3pqv")
volume_db = -15.433
pitch_scale = 0.28
bus = &"ReverbAmbience"

[node name="ExhaustionSound" type="AudioStreamPlayer" parent="Head"]
stream = ExtResource("3_6v6k0")
volume_db = -4.685
pitch_scale = 0.86
bus = &"ReverbAmbience"

[node name="HurtSound" type="AudioStreamPlayer" parent="Head"]
stream = SubResource("AudioStreamRandomizer_vpon2")
volume_db = -4.685
pitch_scale = 1.04

[node name="DeathSound" type="AudioStreamPlayer" parent="Head"]
stream = ExtResource("5_kaacd")
volume_db = -10.307
pitch_scale = 1.04

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="StaminaBar" type="TextureProgressBar" parent="CanvasLayer"]
z_index = 4
offset_left = 385.0
offset_top = 252.0
offset_right = 476.0
offset_bottom = 275.0
step = 0.1
value = 100.0
rounded = true
nine_patch_stretch = true
texture_under = ExtResource("3_erkmy")
texture_over = ExtResource("4_6v6k0")
texture_progress = ExtResource("5_uwpkh")

[node name="HealthBar" type="TextureProgressBar" parent="CanvasLayer"]
z_index = 4
offset_left = 384.0
offset_top = 291.0
offset_right = 475.0
offset_bottom = 314.0
value = 100.0
rounded = true
nine_patch_stretch = true
texture_under = ExtResource("6_vpon2")
texture_over = ExtResource("4_6v6k0")
texture_progress = ExtResource("7_kaacd")

[node name="HealthLabel" type="RichTextLabel" parent="CanvasLayer"]
z_index = 4
offset_left = 405.0
offset_top = 274.0
offset_right = 458.0
offset_bottom = 299.0
theme = ExtResource("9_uwpkh")
theme_override_colors/default_color = Color(1, 0, 0, 1)
text = "Health"
scroll_active = false
horizontal_alignment = 1

[node name="StaminaLabel" type="RichTextLabel" parent="CanvasLayer"]
z_index = 4
offset_left = 401.0
offset_top = 234.0
offset_right = 464.0
offset_bottom = 259.0
theme = ExtResource("9_uwpkh")
theme_override_colors/default_color = Color(0.150648, 0.482341, 1, 1)
text = "Stamina
"
scroll_active = false
horizontal_alignment = 1

[node name="HurtFilter" type="ColorRect" parent="CanvasLayer"]
visible = false
offset_right = 40.0
offset_bottom = 40.0
scale = Vector2(12, 8)
mouse_filter = 2
color = Color(1, 0, 0, 0.243137)

[node name="SpawnFilter" type="ColorRect" parent="CanvasLayer"]
offset_right = 480.0
offset_bottom = 320.0
mouse_filter = 2
color = Color(0, 0, 0, 1)

[node name="ExhaustionTimer" type="Timer" parent="."]
wait_time = 5.0
one_shot = true

[node name="CanRegen" type="Timer" parent="."]
one_shot = true

[node name="HurtFrame" type="Timer" parent="."]
wait_time = 0.1
one_shot = true

[connection signal="timeout" from="ExhaustionTimer" to="." method="_exhaust_end"]
[connection signal="timeout" from="HurtFrame" to="." method="_hurt_frame_end"]
